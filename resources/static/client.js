// Code is generated by github.com/swaggest/swac v0.1.24, DO NOT EDIT. ðŸ¤–

(function(){
    "use strict";
    
    /**
     * @constructor
     * @param {string} baseURL - Base URL.
     */
    function Backend(baseURL) {
        // Trim trailing backslash.
        this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
        /** @type {?PrepareRequest} - Callback to prepare request before sending. */
        this.prepareRequest = null;
    }

    /**
     * @callback PrepareRequest
     * @param {XMLHttpRequest} value
     */

    /**
     * Hello World
     * Greeter says hello.
     * @param {InternalUsecaseHelloWorldRequest} req - request parameters.
     * @param {UsecaseHelloOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.internalUsecaseHelloWorld = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }
        
            switch (x.status) {
                case 200:
                    if (typeof(onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof(onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof(onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };
        
        var url = this.baseURL + '/hello?';
        if (req.name != null) {
            url += 'name=' + encodeURIComponent(req.name) + '&';
        }
        if (req.locale != null) {
            url += 'locale=' + encodeURIComponent(req.locale) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof(this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        
        x.send();
    };

    
    window.Backend = Backend;
})();